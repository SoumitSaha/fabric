// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fastfabric-extensions/remote/persistent.proto

package remote

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/hyperledger/fabric/protos/common"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Result struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_7473931e98c251ec, []int{0}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Result)(nil), "grpc.Result")
}

func init() {
	proto.RegisterFile("fastfabric-extensions/remote/persistent.proto", fileDescriptor_7473931e98c251ec)
}

var fileDescriptor_7473931e98c251ec = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8d, 0xb1, 0x0e, 0x82, 0x40,
	0x10, 0x44, 0x2d, 0x94, 0x98, 0x0b, 0x5a, 0x5c, 0x49, 0x49, 0x61, 0xc7, 0x91, 0xe8, 0x1f, 0x68,
	0x6b, 0x41, 0xf4, 0x0b, 0xe0, 0x1c, 0x08, 0x11, 0x6e, 0x2f, 0xbb, 0x6b, 0xe2, 0xe7, 0x1b, 0x81,
	0xd8, 0x5a, 0x4d, 0x26, 0x79, 0x6f, 0xc6, 0x14, 0x6d, 0x2d, 0xda, 0xd6, 0x0d, 0xf7, 0xbe, 0xc0,
	0x5b, 0x11, 0xa4, 0xa7, 0x20, 0x25, 0x63, 0x24, 0x45, 0x19, 0xc1, 0xd2, 0x8b, 0x22, 0xa8, 0x8b,
	0x4c, 0x4a, 0x76, 0xdd, 0x71, 0xf4, 0x59, 0x36, 0x15, 0x29, 0x3d, 0x8d, 0x23, 0x85, 0x25, 0x66,
	0x22, 0xdf, 0x9a, 0xe4, 0x06, 0x79, 0x0d, 0x7a, 0xec, 0xcc, 0xbe, 0xfa, 0xf9, 0x15, 0xc0, 0xf6,
	0x60, 0x36, 0x77, 0x25, 0x86, 0xdd, 0xb9, 0xc5, 0x39, 0x0f, 0xe4, 0x9f, 0x59, 0xea, 0xbe, 0xb3,
	0x6e, 0xf6, 0xf2, 0x95, 0x2d, 0x4c, 0x7a, 0x61, 0xd4, 0x8a, 0x2b, 0x1e, 0x1d, 0xf8, 0x0f, 0xde,
	0x24, 0xd3, 0xf3, 0xe9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x0f, 0x2c, 0x16, 0xcc, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PersistentPeerClient is the client API for PersistentPeer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PersistentPeerClient interface {
	Store(ctx context.Context, in *common.Block, opts ...grpc.CallOption) (*Result, error)
	CreateLedger(ctx context.Context, in *common.Block, opts ...grpc.CallOption) (*Result, error)
}

type persistentPeerClient struct {
	cc *grpc.ClientConn
}

func NewPersistentPeerClient(cc *grpc.ClientConn) PersistentPeerClient {
	return &persistentPeerClient{cc}
}

func (c *persistentPeerClient) Store(ctx context.Context, in *common.Block, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc.PersistentPeer/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentPeerClient) CreateLedger(ctx context.Context, in *common.Block, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc.PersistentPeer/CreateLedger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersistentPeerServer is the server API for PersistentPeer service.
type PersistentPeerServer interface {
	Store(context.Context, *common.Block) (*Result, error)
	CreateLedger(context.Context, *common.Block) (*Result, error)
}

func RegisterPersistentPeerServer(s *grpc.Server, srv PersistentPeerServer) {
	s.RegisterService(&_PersistentPeer_serviceDesc, srv)
}

func _PersistentPeer_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentPeerServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PersistentPeer/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentPeerServer).Store(ctx, req.(*common.Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentPeer_CreateLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentPeerServer).CreateLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PersistentPeer/CreateLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentPeerServer).CreateLedger(ctx, req.(*common.Block))
	}
	return interceptor(ctx, in, info, handler)
}

var _PersistentPeer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.PersistentPeer",
	HandlerType: (*PersistentPeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _PersistentPeer_Store_Handler,
		},
		{
			MethodName: "CreateLedger",
			Handler:    _PersistentPeer_CreateLedger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fastfabric-extensions/remote/persistent.proto",
}
